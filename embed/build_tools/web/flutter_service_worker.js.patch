--- flutter_service_worker.js	2023-08-23 11:01:10
+++ flutter_service_worker_new.js	2023-08-23 11:02:16
@@ -2,56 +2,37 @@
 const MANIFEST = 'flutter-app-manifest';
 const TEMP = 'flutter-temp-cache';
 const CACHE_NAME = 'flutter-app-cache';
-
-const RESOURCES = {"version.json": "6b67ed8fdf85252fa609a55113da5bc3",
-"index.html": "3d0b0b6e63c3a3ba3dd0c46ef6e1acd4",
-"/": "3d0b0b6e63c3a3ba3dd0c46ef6e1acd4",
-"flutter.js.patch": "b3d156c63ad50d06557087f31970e20f",
-"main.dart.js": "e239ebccda592637ec7ebce3baed6685",
-"flutter.js": "6fef97aeca90b426343ba6c5c9dc5d4a",
-"flutter_new.js": "3f9380cd51f70e56b6c4127668e31e0a",
-"favicon.png": "5dcef449791fa27946b3d35ad8803796",
-"icons/Icon-192.png": "ac9a721a12bbc803b44f645561ecb1e1",
-"icons/Icon-maskable-192.png": "c457ef57daa1d16f64b27b786ec2ea3c",
-"icons/Icon-maskable-512.png": "301a7604d45b3e739efc881eb04896ea",
-"icons/Icon-512.png": "96e752610906ba2a93c65f8abe1645f1",
-"manifest.json": "746209d0d92ba5af2affe76f879cd254",
-"assets/AssetManifest.json": "2594af5884dec9c406a1dfa645d2ab15",
-"assets/NOTICES": "053dc69fbedb5cc5824116bc39efdaad",
-"assets/FontManifest.json": "b7ca4e7c043b18b49350a317bffae450",
-"assets/packages/line_icons/lib/assets/fonts/LineIcons.ttf": "23621397bc1906a79180a918e98f35b2",
-"assets/packages/material_design_icons_flutter/lib/fonts/materialdesignicons-webfont.ttf": "d10ac4ee5ebe8c8fff90505150ba2a76",
-"assets/packages/font_awesome_flutter/lib/fonts/fa-solid-900.ttf": "1e17b1ec3152f29bf783bd42db8b6023",
-"assets/packages/font_awesome_flutter/lib/fonts/fa-regular-400.ttf": "093d2cde7075fcffb24ab215668d0da2",
-"assets/packages/font_awesome_flutter/lib/fonts/fa-brands-400.ttf": "5ac99533bd9dc46227434b4853c3e532",
-"assets/packages/feather_icons/fonts/feather.ttf": "ad5435302c3c2d1f23f275d0f22d36c6",
-"assets/shaders/ink_sparkle.frag": "f8b80e740d33eb157090be4e995febdf",
-"assets/AssetManifest.bin": "5c9800cabf6f5207fcd79ea3822de481",
+const RESOURCES = {
+  "version.json": "11e1a177d57c5da2bc6e3a6acc3010f4",
+"index.html": "2c1561c4516a2ffcadbebd174d54f77f",
+"/": "2c1561c4516a2ffcadbebd174d54f77f",
+"main.dart.js": "c5705716cb1a470ced81fb369fca3ccc",
+"flutter.js": "1cfe996e845b3a8a33f57607e8b09ee4",
+"favicon.png": "0063030f6ef69989a7a1cea69a72bb11",
+"icons/Icon-192.png": "199fd5c36e8a18bc511b8c7329e06494",
+"icons/Icon-maskable-192.png": "199fd5c36e8a18bc511b8c7329e06494",
+"icons/Icon-maskable-512.png": "79ab1fe27faa2353242d0da06f44aa14",
+"icons/Icon-512.png": "79ab1fe27faa2353242d0da06f44aa14",
+"manifest.json": "8ccdf3cdf2daa2e87904701543f345b8",
+"assets/AssetManifest.json": "829dc31ec9f65ae79d5de1cdce6cda9d",
+"assets/NOTICES": "258d47a58a00cf26f73455e540ec8711",
+"assets/FontManifest.json": "dc3d03800ccca4601324923c0b1d6d57",
+"assets/packages/cupertino_icons/assets/CupertinoIcons.ttf": "6d342eb68f170c97609e9da345464e5e",
 "assets/fonts/MaterialIcons-Regular.otf": "e7069dfd19b331be16bed984668fe080",
-"canvaskit/skwasm.js": "95f16c6690f955a45b2317496983dbe9",
-"canvaskit/skwasm.wasm": "d1fde2560be92c0b07ad9cf9acb10d05",
-"canvaskit/chromium/canvaskit.js": "ffb2bb6484d5689d91f393b60664d530",
-"canvaskit/chromium/canvaskit.wasm": "393ec8fb05d94036734f8104fa550a67",
-"canvaskit/canvaskit.js": "5caccb235fad20e9b72ea6da5a0094e6",
-"canvaskit/canvaskit.wasm": "d9f69e0f428f695dc3d66b3a83a4aa8e",
-"canvaskit/skwasm.worker.js": "51253d3321b11ddb8d73fa8aa87d3b15"};
+"assets/assets/icon/icon.png": "af7d25b6da5f47db92dc23dfdddf865f",
+"canvaskit/canvaskit.js": "97937cb4c2c2073c968525a3e08c86a3",
+"canvaskit/profiling/canvaskit.js": "c21852696bc1cc82e8894d851c01921a",
+"canvaskit/profiling/canvaskit.wasm": "371bc4e204443b0d5e774d64a046eb99",
+"canvaskit/canvaskit.wasm": "3de12d898ec208a5f31362cc00f09b9e"
+};
+
 // The application shell files that are downloaded before a service worker can
 // start.
-const CORE = ["main.dart.js",
-"index.html",
-"assets/AssetManifest.json",
-"assets/FontManifest.json"];
 
-// During install, the TEMP cache is populated with the application shell files.
-self.addEventListener("install", (event) => {
-  self.skipWaiting();
-  return event.waitUntil(
-    caches.open(TEMP).then((cache) => {
-      return cache.addAll(
-        CORE.map((value) => new Request(value, {'cache': 'reload'})));
-    })
-  );
-});
+// Removed this section because the files are downloaded concurrently, so we don't check
+
+var IN_PROCESSING_REQUESTS = {};
+
 // During activate, the cache is populated with the temp files downloaded in
 // install. If this service worker is upgrading from one with a saved
 // MANIFEST, then use this to retain unchanged resource files.
@@ -73,8 +54,6 @@
         await caches.delete(TEMP);
         // Save the manifest to make future upgrades efficient.
         await manifestCache.put('manifest', new Response(JSON.stringify(RESOURCES)));
-        // Claim client to enable caching on first launch
-        self.clients.claim();
         return;
       }
       var oldManifest = await manifest.json();
@@ -100,8 +79,6 @@
       await caches.delete(TEMP);
       // Save the manifest to make future upgrades efficient.
       await manifestCache.put('manifest', new Response(JSON.stringify(RESOURCES)));
-      // Claim client to enable caching on first launch
-      self.clients.claim();
       return;
     } catch (err) {
       // On an unhandled exception the state of the cache cannot be guaranteed.
@@ -112,6 +89,7 @@
     }
   }());
 });
+
 // The fetch handler redirects requests for RESOURCE files to the service
 // worker cache.
 self.addEventListener("fetch", (event) => {
@@ -141,16 +119,29 @@
       return cache.match(event.request).then((response) => {
         // Either respond with the cached resource, or perform a fetch and
         // lazily populate the cache only if the resource was successfully fetched.
-        return response || fetch(event.request).then((response) => {
+
+        if (response) {
+          return response;
+        }
+
+        if (IN_PROCESSING_REQUESTS[key]) {
+          return IN_PROCESSING_REQUESTS[key].clone();
+        }
+
+        return fetch(event.request).then((response) => {
           if (response && Boolean(response.ok)) {
-            cache.put(event.request, response.clone());
+            cache.put(event.request, response.clone())
+                 .then(() => delete IN_PROCESSING_REQUESTS[key]);
           }
+
+          IN_PROCESSING_REQUESTS[key] = response.clone();
           return response;
         });
       })
     })
   );
 });
+
 self.addEventListener('message', (event) => {
   // SkipWaiting can be used to immediately activate a waiting service worker.
   // This will also require a page refresh triggered by the main worker.
@@ -163,6 +154,7 @@
     return;
   }
 });
+
 // Download offline will check the RESOURCES for all files not in the cache
 // and populate them.
 async function downloadOffline() {
@@ -183,6 +175,7 @@
   }
   return contentCache.addAll(resources);
 }
+
 // Attempt to download the resource online before falling back to
 // the offline cache.
 function onlineFirst(event) {
@@ -203,4 +196,4 @@
       });
     })
   );
-}
+}
\ No newline at end of file
